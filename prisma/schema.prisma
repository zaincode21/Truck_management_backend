// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Truck {
  id            Int       @id @default(autoincrement())
  license_plate String    @unique
  model         String
  year          Int
  capacity      Float
  status        String    @default("active") // active, maintenance, inactive
  last_service  DateTime?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  deliveries Delivery[]
  expenses   Expense[]
  fines      Fine[]
  employees  Employee[]

  @@map("trucks")
}

model Employee {
  id             Int      @id @default(autoincrement())
  name           String
  email          String   @unique
  phone          String
  license_number String   @unique
  hire_date      DateTime
  status         String   @default("active") // active, inactive
  role           String   @default("driver") // admin, driver
  password       String?  // Hashed password (optional for backward compatibility)
  truck_id       Int?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  truck      Truck?     @relation(fields: [truck_id], references: [id])
  deliveries Delivery[]
  fines      Fine[]

  @@map("employees")
}

model Product {
  id             Int      @id @default(autoincrement())
  name           String
  category       String?
  unit_price     Float?
  stock_quantity Int?
  description    String?
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  deliveries Delivery[]

  @@map("products")
}

model Delivery {
  id            Int      @id @default(autoincrement())
  delivery_code String   @unique
  product_id    Int
  car_id        Int
  employee_id   Int
  origin        String
  destination   String
  delivery_date DateTime
  status        String   @default("pending") // pending, in-transit, delivered, cancelled
  cost          Float
  fuel_cost     Float
  mileage_cost  Float    @default(0) // Money given to employee for the delivery
  price         Float
  total_income  Float
  notes         String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  product  Product  @relation(fields: [product_id], references: [id])
  truck    Truck    @relation(fields: [car_id], references: [id])
  employee Employee @relation(fields: [employee_id], references: [id])

  @@map("deliveries")
}

model Expense {
  id           Int      @id @default(autoincrement())
  car_id       Int
  expense_type String // fuel, maintenance, repair, insurance, etc.
  amount       Float
  expense_date DateTime
  description  String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  truck Truck @relation(fields: [car_id], references: [id])

  @@map("expenses")
}

model Fine {
  id         Int      @id @default(autoincrement())
  car_id     Int
  employee_id Int
  fine_type  String   // Rwanda National Police fine types
  fine_date  DateTime  // timestamp
  fine_cost  Float
  description String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  truck    Truck    @relation(fields: [car_id], references: [id])
  employee Employee @relation(fields: [employee_id], references: [id])

  @@map("fines")
}
